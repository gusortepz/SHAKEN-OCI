{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var themeId = options.themeId,\n    _options$theme = options.theme,\n    defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n    _options$modeStorageK = options.modeStorageKey,\n    defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n    _options$colorSchemeS = options.colorSchemeStorageKey,\n    defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n    _options$disableTrans = options.disableTransitionOnChange,\n    designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n    defaultColorScheme = options.defaultColorScheme,\n    resolveTheme = options.resolveTheme;\n  var defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: function setColorScheme() {},\n    setMode: function setMode() {},\n    systemMode: undefined\n  };\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  var useColorScheme = function useColorScheme() {\n    return React.useContext(ColorSchemeContext) || defaultContext;\n  };\n  var defaultColorSchemes = {};\n  var defaultComponents = {};\n  function CssVarsProvider(props) {\n    var _colorSchemes$restThe, _restThemeProp$palett, _memoTheme$generateSt;\n    var children = props.children,\n      themeProp = props.theme,\n      _props$modeStorageKey = props.modeStorageKey,\n      modeStorageKey = _props$modeStorageKey === void 0 ? defaultModeStorageKey : _props$modeStorageKey,\n      _props$colorSchemeSto = props.colorSchemeStorageKey,\n      colorSchemeStorageKey = _props$colorSchemeSto === void 0 ? defaultColorSchemeStorageKey : _props$colorSchemeSto,\n      _props$disableTransit = props.disableTransitionOnChange,\n      disableTransitionOnChange = _props$disableTransit === void 0 ? designSystemTransitionOnChange : _props$disableTransit,\n      storageManager = props.storageManager,\n      _props$storageWindow = props.storageWindow,\n      storageWindow = _props$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _props$storageWindow,\n      _props$documentNode = props.documentNode,\n      documentNode = _props$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _props$documentNode,\n      _props$colorSchemeNod = props.colorSchemeNode,\n      colorSchemeNode = _props$colorSchemeNod === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _props$colorSchemeNod,\n      _props$disableNestedC = props.disableNestedContext,\n      disableNestedContext = _props$disableNestedC === void 0 ? false : _props$disableNestedC,\n      _props$disableStyleSh = props.disableStyleSheetGeneration,\n      disableStyleSheetGeneration = _props$disableStyleSh === void 0 ? false : _props$disableStyleSh,\n      _props$defaultMode = props.defaultMode,\n      initialMode = _props$defaultMode === void 0 ? 'system' : _props$defaultMode,\n      noSsr = props.noSsr;\n    var hasMounted = React.useRef(false);\n    var upperTheme = muiUseTheme();\n    var ctx = React.useContext(ColorSchemeContext);\n    var nested = !!ctx && !disableNestedContext;\n    var initialTheme = React.useMemo(function () {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    var scopedTheme = initialTheme[themeId];\n    var restThemeProp = scopedTheme || initialTheme;\n    var _restThemeProp$colorS = restThemeProp.colorSchemes,\n      colorSchemes = _restThemeProp$colorS === void 0 ? defaultColorSchemes : _restThemeProp$colorS,\n      _restThemeProp$compon = restThemeProp.components,\n      components = _restThemeProp$compon === void 0 ? defaultComponents : _restThemeProp$compon,\n      cssVarPrefix = restThemeProp.cssVarPrefix;\n    var joinedColorSchemes = Object.keys(colorSchemes).filter(function (k) {\n      return !!colorSchemes[k];\n    }).join(',');\n    var allColorSchemes = React.useMemo(function () {\n      return joinedColorSchemes.split(',');\n    }, [joinedColorSchemes]);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    var defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? initialMode : ((_colorSchemes$restThe = colorSchemes[restThemeProp.defaultColorScheme]) === null || _colorSchemes$restThe === void 0 || (_colorSchemes$restThe = _colorSchemes$restThe.palette) === null || _colorSchemes$restThe === void 0 ? void 0 : _colorSchemes$restThe.mode) || ((_restThemeProp$palett = restThemeProp.palette) === null || _restThemeProp$palett === void 0 ? void 0 : _restThemeProp$palett.mode);\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    var _useCurrentColorSchem = useCurrentColorScheme({\n        supportedColorSchemes: allColorSchemes,\n        defaultLightColorScheme: defaultLightColorScheme,\n        defaultDarkColorScheme: defaultDarkColorScheme,\n        modeStorageKey: modeStorageKey,\n        colorSchemeStorageKey: colorSchemeStorageKey,\n        defaultMode: defaultMode,\n        storageManager: storageManager,\n        storageWindow: storageWindow,\n        noSsr: noSsr\n      }),\n      stateMode = _useCurrentColorSchem.mode,\n      setMode = _useCurrentColorSchem.setMode,\n      systemMode = _useCurrentColorSchem.systemMode,\n      lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n      darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n      stateColorScheme = _useCurrentColorSchem.colorScheme,\n      setColorScheme = _useCurrentColorSchem.setColorScheme;\n    var mode = stateMode;\n    var colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    var memoTheme = React.useMemo(function () {\n      var _restThemeProp$genera;\n      // `colorScheme` is undefined on the server and hydration phase\n      var calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n      // 2. get the `vars` object that refers to the CSS custom properties\n      var themeVars = ((_restThemeProp$genera = restThemeProp.generateThemeVars) === null || _restThemeProp$genera === void 0 ? void 0 : _restThemeProp$genera.call(restThemeProp)) || restThemeProp.vars;\n\n      // 3. Start composing the theme object\n      var theme = _objectSpread(_objectSpread({}, restThemeProp), {}, {\n        components: components,\n        colorSchemes: colorSchemes,\n        cssVarPrefix: cssVarPrefix,\n        vars: themeVars\n      });\n      if (typeof theme.generateSpacing === 'function') {\n        theme.spacing = theme.generateSpacing();\n      }\n\n      // 4. Resolve the color scheme and merge it to the theme\n      if (calculatedColorScheme) {\n        var scheme = colorSchemes[calculatedColorScheme];\n        if (scheme && typeof scheme === 'object') {\n          // 4.1 Merge the selected color scheme to the theme\n          Object.keys(scheme).forEach(function (schemeKey) {\n            if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n              // shallow merge the 1st level structure of the theme.\n              theme[schemeKey] = _objectSpread(_objectSpread({}, theme[schemeKey]), scheme[schemeKey]);\n            } else {\n              theme[schemeKey] = scheme[schemeKey];\n            }\n          });\n        }\n      }\n      return resolveTheme ? resolveTheme(theme) : theme;\n    }, [restThemeProp, colorScheme, components, colorSchemes, cssVarPrefix]);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    var colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    useEnhancedEffect(function () {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        var selector = colorSchemeSelector;\n        var rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = \".%s\";\n        }\n        if (selector === 'data') {\n          rule = \"[data-%s]\";\n        }\n        if (selector !== null && selector !== void 0 && selector.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = \"[\".concat(selector, \"=\\\"%s\\\"]\");\n        }\n        if (rule.startsWith('.')) {\n          var _colorSchemeNode$clas;\n          (_colorSchemeNode$clas = colorSchemeNode.classList).remove.apply(_colorSchemeNode$clas, _toConsumableArray(allColorSchemes.map(function (scheme) {\n            return rule.substring(1).replace('%s', scheme);\n          })));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          var matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            var _matches$1$split = matches[1].split('='),\n              _matches$1$split2 = _slicedToArray(_matches$1$split, 2),\n              attr = _matches$1$split2[0],\n              value = _matches$1$split2[1];\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(function (scheme) {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(function () {\n      var timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    var contextValue = React.useMemo(function () {\n      return {\n        allColorSchemes: allColorSchemes,\n        colorScheme: colorScheme,\n        darkColorScheme: darkColorScheme,\n        lightColorScheme: lightColorScheme,\n        mode: mode,\n        setColorScheme: setColorScheme,\n        setMode: process.env.NODE_ENV === 'production' ? setMode : function (newMode) {\n          if (memoTheme.colorSchemeSelector === 'media') {\n            console.error(['MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).', 'To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.', 'To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually'].join('\\n'));\n          }\n          setMode(newMode);\n        },\n        systemMode: systemMode\n      };\n    }, [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);\n    var shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && (upperTheme === null || upperTheme === void 0 ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    var element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: memoTheme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: ((_memoTheme$generateSt = memoTheme.generateStyleSheets) === null || _memoTheme$generateSt === void 0 ? void 0 : _memoTheme$generateSt.call(memoTheme)) || []\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The default mode when the storage is empty,\n     * require the theme to have `colorSchemes` with light and dark.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.\n     * You should use this option in conjuction with `InitColorSchemeScript` component.\n     */\n    noSsr: PropTypes.bool,\n    /**\n     * The storage manager to be used for storing the mode and color scheme\n     * @default using `window.localStorage`\n     */\n    storageManager: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return InitColorSchemeScript(_objectSpread({\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_slicedToArray","_toConsumableArray","_objectSpread","React","PropTypes","GlobalStyles","useTheme","muiUseTheme","useEnhancedEffect","ThemeProvider","InitColorSchemeScript","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","_options$theme","theme","defaultTheme","_options$modeStorageK","modeStorageKey","defaultModeStorageKey","_options$colorSchemeS","colorSchemeStorageKey","defaultColorSchemeStorageKey","_options$disableTrans","disableTransitionOnChange","designSystemTransitionOnChange","defaultColorScheme","resolveTheme","defaultContext","allColorSchemes","colorScheme","undefined","darkColorScheme","lightColorScheme","mode","setColorScheme","setMode","systemMode","ColorSchemeContext","createContext","process","env","NODE_ENV","displayName","useColorScheme","useContext","defaultColorSchemes","defaultComponents","CssVarsProvider","props","_colorSchemes$restThe","_restThemeProp$palett","_memoTheme$generateSt","children","themeProp","_props$modeStorageKey","_props$colorSchemeSto","_props$disableTransit","storageManager","_props$storageWindow","storageWindow","window","_props$documentNode","documentNode","document","_props$colorSchemeNod","colorSchemeNode","documentElement","_props$disableNestedC","disableNestedContext","_props$disableStyleSh","disableStyleSheetGeneration","_props$defaultMode","defaultMode","initialMode","noSsr","hasMounted","useRef","upperTheme","ctx","nested","initialTheme","useMemo","scopedTheme","restThemeProp","_restThemeProp$colorS","colorSchemes","_restThemeProp$compon","components","cssVarPrefix","joinedColorSchemes","Object","keys","filter","k","join","split","defaultLightColorScheme","light","defaultDarkColorScheme","dark","palette","_useCurrentColorSchem","supportedColorSchemes","stateMode","stateColorScheme","memoTheme","_restThemeProp$genera","calculatedColorScheme","themeVars","generateThemeVars","call","vars","generateSpacing","spacing","scheme","forEach","schemeKey","colorSchemeSelector","selector","rule","startsWith","includes","concat","_colorSchemeNode$clas","classList","remove","apply","map","substring","replace","add","matches","match","_matches$1$split","_matches$1$split2","attr","value","removeAttribute","setAttribute","useEffect","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","newMode","console","error","shouldGenerateStyleSheet","cssVariables","element","Fragment","styles","generateStyleSheets","Provider","propTypes","node","any","string","bool","func","object","getInitColorSchemeScript","params"],"sources":["/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  const defaultColorSchemes = {};\n  const defaultComponents = {};\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageManager,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false,\n      defaultMode: initialMode = 'system',\n      noSsr\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const restThemeProp = scopedTheme || initialTheme;\n    const {\n      colorSchemes = defaultColorSchemes,\n      components = defaultComponents,\n      cssVarPrefix\n    } = restThemeProp;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageManager,\n      storageWindow,\n      noSsr\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const memoTheme = React.useMemo(() => {\n      // `colorScheme` is undefined on the server and hydration phase\n      const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n      // 2. get the `vars` object that refers to the CSS custom properties\n      const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n      // 3. Start composing the theme object\n      const theme = {\n        ...restThemeProp,\n        components,\n        colorSchemes,\n        cssVarPrefix,\n        vars: themeVars\n      };\n      if (typeof theme.generateSpacing === 'function') {\n        theme.spacing = theme.generateSpacing();\n      }\n\n      // 4. Resolve the color scheme and merge it to the theme\n      if (calculatedColorScheme) {\n        const scheme = colorSchemes[calculatedColorScheme];\n        if (scheme && typeof scheme === 'object') {\n          // 4.1 Merge the selected color scheme to the theme\n          Object.keys(scheme).forEach(schemeKey => {\n            if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n              // shallow merge the 1st level structure of the theme.\n              theme[schemeKey] = {\n                ...theme[schemeKey],\n                ...scheme[schemeKey]\n              };\n            } else {\n              theme[schemeKey] = scheme[schemeKey];\n            }\n          });\n        }\n      }\n      return resolveTheme ? resolveTheme(theme) : theme;\n    }, [restThemeProp, colorScheme, components, colorSchemes, cssVarPrefix]);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    useEnhancedEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode: process.env.NODE_ENV === 'production' ? setMode : newMode => {\n        if (memoTheme.colorSchemeSelector === 'media') {\n          console.error(['MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).', 'To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.', 'To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually'].join('\\n'));\n        }\n        setMode(newMode);\n      },\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: memoTheme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: memoTheme.generateStyleSheets?.() || []\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The default mode when the storage is empty,\n     * require the theme to have `colorSchemes` with light and dark.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.\n     * You should use this option in conjuction with `InitColorSchemeScript` component.\n     */\n    noSsr: PropTypes.bool,\n    /**\n     * The storage manager to be used for storing the mode and color scheme\n     * @default using `window.localStorage`\n     */\n    storageManager: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}