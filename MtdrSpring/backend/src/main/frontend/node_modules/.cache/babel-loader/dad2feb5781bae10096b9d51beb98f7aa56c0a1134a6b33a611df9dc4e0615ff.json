{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"BackdropProps\"],\n  _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"allowSwipeInChildren\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport elementTypeAcceptingRef from '@mui/utils/elementTypeAcceptingRef';\nimport NoSsr from \"../NoSsr/index.js\";\nimport Drawer, { getAnchor, isHorizontal } from \"../Drawer/Drawer.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport ownerDocument from \"../utils/ownerDocument.js\";\nimport ownerWindow from \"../utils/ownerWindow.js\";\nimport useEventCallback from \"../utils/useEventCallback.js\";\nimport useEnhancedEffect from \"../utils/useEnhancedEffect.js\";\nimport { useTheme } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getTransitionProps } from \"../transitions/utils.js\";\nimport { mergeSlotProps } from \"../utils/index.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport SwipeArea from \"./SwipeArea.js\";\n\n// This value is closed to what browsers are using internally to\n// trigger a native scroll.\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UNCERTAINTY_THRESHOLD = 3; // px\n\n// This is the part of the drawer displayed on touch start.\nvar DRAG_STARTED_SIGNAL = 20; // px\n\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\nvar claimedSwipeInstance = null;\n\n// Exported for test purposes.\nexport function reset() {\n  claimedSwipeInstance = null;\n}\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  var domTreeShapes = [];\n  while (element && element !== rootNode.parentElement) {\n    var style = ownerWindow(rootNode).getComputedStyle(element);\n    if (\n    // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' ||\n    // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {\n      // noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n    element = element.parentElement;\n  }\n  return domTreeShapes;\n}\n\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\nfunction computeHasNativeHandler(_ref) {\n  var domTreeShapes = _ref.domTreeShapes,\n    start = _ref.start,\n    current = _ref.current,\n    anchor = _ref.anchor;\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  var axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(function (shape) {\n    // Determine if we are going backward or forward.\n    var goingForward = current >= start;\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n    var axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    var scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    var areNotAtStart = scrollPosition > 0;\n    var areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n    return false;\n  });\n}\nvar iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nvar SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  var _slotProps$backdrop, _slotProps$paper;\n  var props = useDefaultProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  var theme = useTheme();\n  var transitionDurationDefault = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n  var _props$anchor = props.anchor,\n    anchor = _props$anchor === void 0 ? 'left' : _props$anchor,\n    _props$disableBackdro = props.disableBackdropTransition,\n    disableBackdropTransition = _props$disableBackdro === void 0 ? false : _props$disableBackdro,\n    _props$disableDiscove = props.disableDiscovery,\n    disableDiscovery = _props$disableDiscove === void 0 ? false : _props$disableDiscove,\n    _props$disableSwipeTo = props.disableSwipeToOpen,\n    disableSwipeToOpen = _props$disableSwipeTo === void 0 ? iOS : _props$disableSwipeTo,\n    hideBackdrop = props.hideBackdrop,\n    _props$hysteresis = props.hysteresis,\n    hysteresis = _props$hysteresis === void 0 ? 0.52 : _props$hysteresis,\n    _props$allowSwipeInCh = props.allowSwipeInChildren,\n    allowSwipeInChildren = _props$allowSwipeInCh === void 0 ? false : _props$allowSwipeInCh,\n    _props$minFlingVeloci = props.minFlingVelocity,\n    minFlingVelocity = _props$minFlingVeloci === void 0 ? 450 : _props$minFlingVeloci,\n    _props$ModalProps = props.ModalProps,\n    _props$ModalProps2 = _props$ModalProps === void 0 ? {} : _props$ModalProps,\n    BackdropProps = _props$ModalProps2.BackdropProps,\n    ModalPropsProp = _objectWithoutProperties(_props$ModalProps2, _excluded),\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    _props$open = props.open,\n    open = _props$open === void 0 ? false : _props$open,\n    _props$PaperProps = props.PaperProps,\n    PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,\n    SwipeAreaProps = props.SwipeAreaProps,\n    _props$swipeAreaWidth = props.swipeAreaWidth,\n    swipeAreaWidth = _props$swipeAreaWidth === void 0 ? 20 : _props$swipeAreaWidth,\n    _props$transitionDura = props.transitionDuration,\n    transitionDuration = _props$transitionDura === void 0 ? transitionDurationDefault : _props$transitionDura,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? 'temporary' : _props$variant,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutProperties(props, _excluded2);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    maybeSwiping = _React$useState2[0],\n    setMaybeSwiping = _React$useState2[1];\n  var swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  var swipeAreaRef = React.useRef();\n  var backdropRef = React.useRef();\n  var paperRef = React.useRef();\n  var handleRef = useForkRef(PaperProps.ref, paperRef);\n  var touchDetected = React.useRef(false);\n\n  // Ref for transition duration based on / to match swipe speed\n  var calculatedDurationRef = React.useRef();\n\n  // Use a ref so the open value used is always up to date inside useCallback.\n  useEnhancedEffect(function () {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  var setPosition = React.useCallback(function (translate) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$mode = options.mode,\n      mode = _options$mode === void 0 ? null : _options$mode,\n      _options$changeTransi = options.changeTransition,\n      changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;\n    var anchorRtl = getAnchor(theme, anchor);\n    var rtlTranslateMultiplier = ['right', 'bottom'].includes(anchorRtl) ? 1 : -1;\n    var horizontalSwipe = isHorizontal(anchor);\n    var transform = horizontalSwipe ? \"translate(\".concat(rtlTranslateMultiplier * translate, \"px, 0)\") : \"translate(0, \".concat(rtlTranslateMultiplier * translate, \"px)\");\n    var drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    var transition = '';\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode: mode\n      }));\n    }\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n    if (!disableBackdropTransition && !hideBackdrop) {\n      var backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  var handleBodyTouchEnd = useEventCallback(function (nativeEvent) {\n    if (!touchDetected.current) {\n      return;\n    }\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- claimedSwipeInstance is a singleton\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    ReactDOM.flushSync(function () {\n      setMaybeSwiping(false);\n    });\n\n    // The swipe wasn't started.\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n    swipeInstance.current.isSwiping = null;\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontal = isHorizontal(anchor);\n    var current;\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n    var startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    var maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    var currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    var translateRatio = currentTranslate / maxTranslate;\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n      return;\n    }\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  var startMaybeSwiping = function startMaybeSwiping() {\n    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!maybeSwiping) {\n      // on Safari Mobile, if you want to be able to have the 'click' event fired on child elements, nothing in the DOM can be changed.\n      // this is because Safari Mobile will not fire any mouse events (still fires touch though) if the DOM changes during mousemove.\n      // so do this change on first touchmove instead of touchstart\n      if (force || !(disableDiscovery && allowSwipeInChildren)) {\n        ReactDOM.flushSync(function () {\n          setMaybeSwiping(true);\n        });\n      }\n      var horizontalSwipe = isHorizontal(anchor);\n      if (!open && paperRef.current) {\n        // The ref may be null when a parent component updates while swiping.\n        setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n          changeTransition: false\n        });\n      }\n      swipeInstance.current.velocity = 0;\n      swipeInstance.current.lastTime = null;\n      swipeInstance.current.lastTranslate = null;\n      swipeInstance.current.paperHit = false;\n      touchDetected.current = true;\n    }\n  };\n  var handleBodyTouchMove = useEventCallback(function (nativeEvent) {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    }\n\n    // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n    startMaybeSwiping(true);\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontalSwipe = isHorizontal(anchor);\n    var currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    var currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      var domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      var hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes: domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor: anchor\n      });\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n      claimedSwipeInstance = swipeInstance.current;\n    }\n\n    // We don't know yet.\n    if (swipeInstance.current.isSwiping == null) {\n      var dx = Math.abs(currentX - swipeInstance.current.startX);\n      var dy = Math.abs(currentY - swipeInstance.current.startY);\n      var definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        }\n\n        // Shift the starting point.\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n\n        // Compensate for the part of the drawer displayed on touch start.\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n    var maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    var startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n    var translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        var paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n    var velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;\n\n    // Low Pass filter.\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now();\n\n    // We are swiping, let's prevent the scroll event on iOS.\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n    setPosition(translate);\n  });\n  var handleBodyTouchStart = useEventCallback(function (nativeEvent) {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    }\n\n    // We can only have one node at the time claiming ownership for handling the swipe.\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    }\n\n    // At least one element clogs the drawer interaction zone.\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontalSwipe = isHorizontal(anchor);\n    var currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    var currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (!open) {\n      var _paperRef$current;\n      // logic for if swipe should be ignored:\n      // if disableSwipeToOpen\n      // if target != swipeArea, and target is not a child of paper ref\n      // if is a child of paper ref, and `allowSwipeInChildren` does not allow it\n      if (disableSwipeToOpen || !(nativeEvent.target === swipeAreaRef.current || (_paperRef$current = paperRef.current) !== null && _paperRef$current !== void 0 && _paperRef$current.contains(nativeEvent.target) && (typeof allowSwipeInChildren === 'function' ? allowSwipeInChildren(nativeEvent, swipeAreaRef.current, paperRef.current) : allowSwipeInChildren))) {\n        return;\n      }\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    startMaybeSwiping();\n  });\n  React.useEffect(function () {\n    if (variant === 'temporary') {\n      var doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart);\n      // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return function () {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(function () {\n    return function () {\n      // We need to release the lock.\n      if (claimedSwipeInstance === swipeInstance.current) {\n        claimedSwipeInstance = null;\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  var _useSlot = useSlot('swipeArea', {\n      ref: swipeAreaRef,\n      elementType: SwipeArea,\n      ownerState: props,\n      externalForwardedProps: {\n        slots: slots,\n        slotProps: _objectSpread({\n          swipeArea: SwipeAreaProps\n        }, slotProps)\n      },\n      additionalProps: {\n        width: swipeAreaWidth,\n        anchor: anchor\n      }\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SwipeAreaSlot = _useSlot2[0],\n    swipeAreaSlotProps = _useSlot2[1];\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _objectSpread({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _objectSpread(_objectSpread({\n        BackdropProps: _objectSpread(_objectSpread({}, BackdropProps), {}, {\n          ref: backdropRef\n        })\n      }, variant === 'temporary' && {\n        keepMounted: true\n      }), ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref,\n      slots: slots,\n      slotProps: _objectSpread(_objectSpread({}, slotProps), {}, {\n        backdrop: mergeSlotProps((_slotProps$backdrop = slotProps.backdrop) !== null && _slotProps$backdrop !== void 0 ? _slotProps$backdrop : BackdropProps, {\n          ref: backdropRef\n        }),\n        paper: mergeSlotProps((_slotProps$paper = slotProps.paper) !== null && _slotProps$paper !== void 0 ? _slotProps$paper : PaperProps, {\n          style: {\n            pointerEvents: variant === 'temporary' && !open && !allowSwipeInChildren ? 'none' : ''\n          },\n          ref: handleRef\n        })\n      })\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeAreaSlot, _objectSpread({}, swipeAreaSlotProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.\n   * This can be useful in scenarios where the drawer is partially visible.\n   * You can customize it further with a callback that determines which children the user can drag over to open the drawer\n   * (for example, to ignore other elements that handle touch move events, like sliders).\n   *\n   * @param {TouchEvent} event The 'touchstart' event\n   * @param {HTMLDivElement} swipeArea The swipe area element\n   * @param {HTMLDivElement} paper The drawer's paper element\n   *\n   * @default false\n   */\n  allowSwipeInChildren: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    docked: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    swipeArea: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    transition: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    backdrop: PropTypes.elementType,\n    docked: PropTypes.elementType,\n    paper: PropTypes.elementType,\n    root: PropTypes.elementType,\n    swipeArea: PropTypes.elementType,\n    transition: PropTypes.elementType\n  }),\n  /**\n   * The element is used to intercept the touch events on the edge.\n   * @deprecated use the `slotProps.swipeArea` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  SwipeAreaProps: PropTypes.object,\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;","map":{"version":3,"names":["_objectSpread","_slicedToArray","_objectWithoutProperties","_excluded","_excluded2","React","ReactDOM","PropTypes","elementTypeAcceptingRef","NoSsr","Drawer","getAnchor","isHorizontal","useForkRef","ownerDocument","ownerWindow","useEventCallback","useEnhancedEffect","useTheme","useDefaultProps","getTransitionProps","mergeSlotProps","useSlot","SwipeArea","jsx","_jsx","jsxs","_jsxs","UNCERTAINTY_THRESHOLD","DRAG_STARTED_SIGNAL","claimedSwipeInstance","reset","calculateCurrentX","anchor","touches","doc","body","offsetWidth","pageX","calculateCurrentY","containerWindow","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","getDomTreeShapes","element","rootNode","domTreeShapes","parentElement","style","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","computeHasNativeHandler","_ref","start","current","axisProperties","scrollPosition","x","y","scrollLength","clientLength","some","shape","goingForward","axis","round","areNotAtStart","areNotAtEnd","iOS","navigator","test","userAgent","SwipeableDrawer","forwardRef","inProps","ref","_slotProps$backdrop","_slotProps$paper","props","name","theme","transitionDurationDefault","enter","transitions","duration","enteringScreen","exit","leavingScreen","_props$anchor","_props$disableBackdro","disableBackdropTransition","_props$disableDiscove","disableDiscovery","_props$disableSwipeTo","disableSwipeToOpen","hideBackdrop","_props$hysteresis","hysteresis","_props$allowSwipeInCh","allowSwipeInChildren","_props$minFlingVeloci","minFlingVelocity","_props$ModalProps","ModalProps","_props$ModalProps2","BackdropProps","ModalPropsProp","onClose","onOpen","_props$open","_props$PaperProps","PaperProps","SwipeAreaProps","_props$swipeAreaWidth","swipeAreaWidth","_props$transitionDura","transitionDuration","_props$variant","variant","_props$slots","slots","_props$slotProps","slotProps","other","_React$useState","useState","_React$useState2","maybeSwiping","setMaybeSwiping","swipeInstance","useRef","isSwiping","swipeAreaRef","backdropRef","paperRef","handleRef","touchDetected","calculatedDurationRef","setPosition","useCallback","translate","options","arguments","length","undefined","_options$mode","mode","_options$changeTransi","changeTransition","anchorRtl","rtlTranslateMultiplier","includes","transform","concat","drawerStyle","webkitTransform","transition","create","easing","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","nativeEvent","flushSync","horizontal","changedTouches","currentTarget","startX","startY","translateRatio","abs","velocity","startMaybeSwiping","force","lastTime","lastTranslate","paperHit","handleBodyTouchMove","currentX","currentY","contains","target","hasNativeHandler","dx","dy","definitelySwiping","cancelable","preventDefault","performance","now","handleBodyTouchStart","defaultPrevented","defaultMuiPrevented","_paperRef$current","useEffect","addEventListener","passive","removeEventListener","_useSlot","elementType","ownerState","externalForwardedProps","swipeArea","additionalProps","width","_useSlot2","SwipeAreaSlot","swipeAreaSlotProps","Fragment","children","keepMounted","backdrop","paper","pointerEvents","process","env","NODE_ENV","propTypes","oneOfType","func","bool","oneOf","node","number","component","isRequired","object","docked","root","appear"],"sources":["/Users/clules48/Documents/tec/6toSemestre/reto/oci-react-samples/MtdrSpring/backend/src/main/frontend/node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport elementTypeAcceptingRef from '@mui/utils/elementTypeAcceptingRef';\nimport NoSsr from \"../NoSsr/index.js\";\nimport Drawer, { getAnchor, isHorizontal } from \"../Drawer/Drawer.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport ownerDocument from \"../utils/ownerDocument.js\";\nimport ownerWindow from \"../utils/ownerWindow.js\";\nimport useEventCallback from \"../utils/useEventCallback.js\";\nimport useEnhancedEffect from \"../utils/useEnhancedEffect.js\";\nimport { useTheme } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getTransitionProps } from \"../transitions/utils.js\";\nimport { mergeSlotProps } from \"../utils/index.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport SwipeArea from \"./SwipeArea.js\";\n\n// This value is closed to what browsers are using internally to\n// trigger a native scroll.\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n\n// This is the part of the drawer displayed on touch start.\nconst DRAG_STARTED_SIGNAL = 20; // px\n\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\nlet claimedSwipeInstance = null;\n\n// Exported for test purposes.\nexport function reset() {\n  claimedSwipeInstance = null;\n}\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n    if (\n    // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' ||\n    // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {\n      // noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n    element = element.parentElement;\n  }\n  return domTreeShapes;\n}\n\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\nfunction computeHasNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n    return false;\n  });\n}\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const props = useDefaultProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  const theme = useTheme();\n  const transitionDurationDefault = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    allowSwipeInChildren = false,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps,\n      ...ModalPropsProp\n    } = {},\n    onClose,\n    onOpen,\n    open = false,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary',\n    // Mobile first.\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const handleRef = useForkRef(PaperProps.ref, paperRef);\n  const touchDetected = React.useRef(false);\n\n  // Ref for transition duration based on / to match swipe speed\n  const calculatedDurationRef = React.useRef();\n\n  // Use a ref so the open value used is always up to date inside useCallback.\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].includes(anchorRtl) ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- claimedSwipeInstance is a singleton\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    ReactDOM.flushSync(() => {\n      setMaybeSwiping(false);\n    });\n\n    // The swipe wasn't started.\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n      return;\n    }\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const startMaybeSwiping = (force = false) => {\n    if (!maybeSwiping) {\n      // on Safari Mobile, if you want to be able to have the 'click' event fired on child elements, nothing in the DOM can be changed.\n      // this is because Safari Mobile will not fire any mouse events (still fires touch though) if the DOM changes during mousemove.\n      // so do this change on first touchmove instead of touchstart\n      if (force || !(disableDiscovery && allowSwipeInChildren)) {\n        ReactDOM.flushSync(() => {\n          setMaybeSwiping(true);\n        });\n      }\n      const horizontalSwipe = isHorizontal(anchor);\n      if (!open && paperRef.current) {\n        // The ref may be null when a parent component updates while swiping.\n        setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n          changeTransition: false\n        });\n      }\n      swipeInstance.current.velocity = 0;\n      swipeInstance.current.lastTime = null;\n      swipeInstance.current.lastTranslate = null;\n      swipeInstance.current.paperHit = false;\n      touchDetected.current = true;\n    }\n  };\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    }\n\n    // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n    startMaybeSwiping(true);\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n      claimedSwipeInstance = swipeInstance.current;\n    }\n\n    // We don't know yet.\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        }\n\n        // Shift the starting point.\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n\n        // Compensate for the part of the drawer displayed on touch start.\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;\n\n    // Low Pass filter.\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now();\n\n    // We are swiping, let's prevent the scroll event on iOS.\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    }\n\n    // We can only have one node at the time claiming ownership for handling the swipe.\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    }\n\n    // At least one element clogs the drawer interaction zone.\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (!open) {\n      // logic for if swipe should be ignored:\n      // if disableSwipeToOpen\n      // if target != swipeArea, and target is not a child of paper ref\n      // if is a child of paper ref, and `allowSwipeInChildren` does not allow it\n      if (disableSwipeToOpen || !(nativeEvent.target === swipeAreaRef.current || paperRef.current?.contains(nativeEvent.target) && (typeof allowSwipeInChildren === 'function' ? allowSwipeInChildren(nativeEvent, swipeAreaRef.current, paperRef.current) : allowSwipeInChildren))) {\n        return;\n      }\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    startMaybeSwiping();\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart);\n      // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  const [SwipeAreaSlot, swipeAreaSlotProps] = useSlot('swipeArea', {\n    ref: swipeAreaRef,\n    elementType: SwipeArea,\n    ownerState: props,\n    externalForwardedProps: {\n      slots,\n      slotProps: {\n        swipeArea: SwipeAreaProps,\n        ...slotProps\n      }\n    },\n    additionalProps: {\n      width: swipeAreaWidth,\n      anchor\n    }\n  });\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, {\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: {\n        BackdropProps: {\n          ...BackdropProps,\n          ref: backdropRef\n        },\n        // Ensures that paperRef.current will be defined inside the touch start event handler\n        // See https://github.com/mui/material-ui/issues/30414 for more information\n        ...(variant === 'temporary' && {\n          keepMounted: true\n        }),\n        ...ModalPropsProp\n      },\n      hideBackdrop: hideBackdrop,\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref,\n      slots: slots,\n      slotProps: {\n        ...slotProps,\n        backdrop: mergeSlotProps(slotProps.backdrop ?? BackdropProps, {\n          ref: backdropRef\n        }),\n        paper: mergeSlotProps(slotProps.paper ?? PaperProps, {\n          style: {\n            pointerEvents: variant === 'temporary' && !open && !allowSwipeInChildren ? 'none' : ''\n          },\n          ref: handleRef\n        })\n      },\n      ...other\n    }), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeAreaSlot, {\n        ...swipeAreaSlotProps\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.\n   * This can be useful in scenarios where the drawer is partially visible.\n   * You can customize it further with a callback that determines which children the user can drag over to open the drawer\n   * (for example, to ignore other elements that handle touch move events, like sliders).\n   *\n   * @param {TouchEvent} event The 'touchstart' event\n   * @param {HTMLDivElement} swipeArea The swipe area element\n   * @param {HTMLDivElement} paper The drawer's paper element\n   *\n   * @default false\n   */\n  allowSwipeInChildren: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    docked: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    swipeArea: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    transition: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    backdrop: PropTypes.elementType,\n    docked: PropTypes.elementType,\n    paper: PropTypes.elementType,\n    root: PropTypes.elementType,\n    swipeArea: PropTypes.elementType,\n    transition: PropTypes.elementType\n  }),\n  /**\n   * The element is used to intercept the touch events on the edge.\n   * @deprecated use the `slotProps.swipeArea` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  SwipeAreaProps: PropTypes.object,\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}